
import asyncio
import sys
import os
sys.path.append('/home/user/workspace')

from config.config import config
from backend.database import db, UserModel, TaskModel

async def test_bot_functions():
    print("üîß Probando funciones del bot TaskGram...")
    print("=" * 50)
    
    # 1. Probar conexi√≥n a base de datos
    try:
        await db.async_connect()
        print("‚úÖ 1. Conexi√≥n a MongoDB: OK")
    except Exception as e:
        print(f"‚ùå 1. Error MongoDB: {e}")
        return
    
    # 2. Probar modelo de usuario
    try:
        admin_user = UserModel.get_user(config.ADMIN_ID)
        if admin_user:
            print(f"‚úÖ 2. Usuario admin encontrado: {admin_user['first_name']}")
        else:
            print("‚ÑπÔ∏è 2. Usuario admin se crear√° al usar /start")
    except Exception as e:
        print(f"‚ùå 2. Error usuario: {e}")
    
    # 3. Probar modelo de tareas
    try:
        tasks = TaskModel.get_tasks()
        print(f"‚úÖ 3. Tareas en DB: {len(tasks)} encontradas")
    except Exception as e:
        print(f"‚ùå 3. Error tareas: {e}")
    
    # 4. Verificar configuraci√≥n
    print(f"‚úÖ 4. Bot Token: {config.BOT_TOKEN[:20]}...")
    print(f"‚úÖ 5. Admin ID: {config.ADMIN_ID}")
    print(f"‚úÖ 6. WebApp URL: {config.WEBAPP_URL}")
    
    print("=" * 50)
    print("üéâ Todas las funciones del bot est√°n listas!")
    print()
    print("üìã Para probar el bot:")
    print("1. Env√≠a /start al bot @Asistentedesign_bot")
    print("2. El bot deber√≠a responder con el men√∫ principal")
    print("3. Como admin, ver√°s el bot√≥n 'Panel de Admin'")
    print("4. Puedes abrir la Mini App desde el bot√≥n")
    
    await db.async_close()

if __name__ == "__main__":
    asyncio.run(test_bot_functions())
